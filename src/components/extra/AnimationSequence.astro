---
import type { HTMLTag, Polymorphic } from "astro/types";

interface ExtraProps {
  class?: string;
  animationClass: string;
  effectDepth?: number;
  effectThreshold?: number;
  initialDelay?: number;
  delay?: number;
  ignoreRootAnimate?: boolean;
}

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & ExtraProps;

const {
  as: Tag = "div",
  class: className,
  animationClass,
  effectDepth = 1,
  effectThreshold = 8,
  initialDelay = 0,
  delay = 50,
  ignoreRootAnimate = false,
  ...props
} = Astro.props;

const id = `animseq-${Math.random().toString(36).slice(2, 11)}`;
---

<Tag id={id} class:list={[className]} {...props}>
  <slot />
</Tag>

<script
  is:inline
  define:vars={{
    id,
    animationClass,
    initialDelay,
    delay,
    effectDepth,
    effectThreshold,
    ignoreRootAnimate,
  }}
>
  const searchElement = (element, index, depth, callback) => {
    if (effectDepth < depth) return;
    callback(element, index, depth);

    const children = Array.from(element.children);
    children.forEach((e, i) =>
      searchElement(e, index + i, depth + 1, callback),
    );
  };

  const animate = (element, index, depth) => {
    element.classList.add(animationClass);
    const totalDelay = index * delay + depth * delay + initialDelay;
    element.style.animationDelay = `${totalDelay}ms`;
  };

  const root = document.getElementById(id);
  if (!root) return;
  if (!ignoreRootAnimate) animate(root, 0, 0);
  const rootChildren = Array.from(root.children).slice(0, effectThreshold);
  rootChildren.forEach((e, i) => searchElement(e, i, 1, animate));
</script>
